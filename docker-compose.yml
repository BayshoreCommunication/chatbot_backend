# Docker Compose file for chatbot backend
# Note: version is no longer required in newer Docker Compose versions

services:
  web:
    build: .
    container_name: chatbot-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      ENVIRONMENT: production
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_DB: "0"
      MONGO_URI: ${MONGO_URI}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_ENV: ${PINECONE_ENV}
      PINECONE_INDEX: ${PINECONE_INDEX}
      DO_SPACES_BUCKET: ${DO_SPACES_BUCKET}
      DO_SPACES_REGION: ${DO_SPACES_REGION}
      DO_SPACES_KEY: ${DO_SPACES_KEY}
      DO_SPACES_SECRET: ${DO_SPACES_SECRET}
      DO_FOLDER_NAME: ${DO_FOLDER_NAME}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRE: ${CLIENT_SECRE}
      WEBHOOK_SIGNING_KEY: ${WEBHOOK_SIGNING_KEY}
      CALENDLY_API_KEY: ${CALENDLY_API_KEY}
      PUBLISHABLE_KEY: ${PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    volumes:
      - ./uploads:/opt/chatbot-app/uploads
      - ./logs:/opt/chatbot-app/logs
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - web

  redis:
    image: redis:7.2-alpine
    container_name: chatbot-redis
    restart: unless-stopped
    # No external ports - only accessible within Docker network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Optional: persistence + password
    # command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]

volumes:
  redis_data:
  caddy_data:
  caddy_config:
