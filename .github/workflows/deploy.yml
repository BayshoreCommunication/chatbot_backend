name: ci-cd
on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          set -e
          python -m pip install --upgrade pip wheel setuptools
          REQS=""
          for f in requirements.txt app/requirements.txt; do
            if [ -f "$f" ]; then REQS="$f"; break; fi
          done
          if [ -z "$REQS" ]; then
            echo "No requirements.txt found (checked: ./requirements.txt and ./app/requirements.txt)"
            exit 1
          fi
          echo "Using $REQS"
          pip install -r "$REQS"
      - name: Syntax check
        run: |
          set -e
          echo "Checking Python syntax..."
          FILES=$(find . -name "*.py" -not -path "./.git/*" -not -path "./venv/*" -not -path "./env/*" -not -path "./__pycache__/*" | head -20)
          if [ -n "$FILES" ]; then
            echo "Found Python files:"
            echo "$FILES"
            python -m py_compile $FILES
            echo "‚úÖ All Python files compile successfully"
          else
            echo "No Python files found to check"
          fi

  deploy:
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Trust SSH host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Upload repo to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "."
          target: ${{ secrets.APP_DIR }}
          strip_components: 0
          overwrite: true
          debug: true

      - name: Build, restart, health check
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            echo "üöÄ Starting deployment..."
            cd ${{ secrets.APP_DIR }}

            # Check if docker compose is available
            if docker compose version >/dev/null 2>&1; then 
              DC="docker compose"
            else 
              DC="docker-compose"
            fi

            echo "Using Docker Compose command: $DC"

            # Stop existing containers
            echo "‚èπÔ∏è Stopping existing containers..."
            $DC down || true

            # Build new container
            echo "üèóÔ∏è Building new container..."
            $DC build --no-cache web

            # Start containers
            echo "üöÄ Starting containers..."
            $DC up -d

            # Wait for service to be ready
            echo "‚è≥ Waiting for service to start..."
            sleep 10

            # Health check
            echo "üè• Running health check..."
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ping || echo 000)
              echo "Health check attempt $i: HTTP $code"
              if [ "$code" = "200" ]; then
                echo "‚úÖ Health check passed!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "‚ùå Health check failed after 30 attempts"
                echo "Container logs:"
                $DC logs --no-color --tail=50 web
                exit 1
              fi
              sleep 5
            done

            echo "üéâ Deployment completed successfully!"
            echo "Your app is running at: http://${{ secrets.SSH_HOST }}:8000"
