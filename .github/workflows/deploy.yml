name: ci-cd
on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          set -e
          python -m pip install --upgrade pip wheel setuptools
          REQS=""
          for f in requirements.txt app/requirements.txt; do
            if [ -f "$f" ]; then REQS="$f"; break; fi
          done
          if [ -z "$REQS" ]; then
            echo "No requirements.txt found (checked: ./requirements.txt and ./app/requirements.txt)"
            exit 1
          fi
          echo "Using $REQS"
          pip install -r "$REQS"
      - name: Syntax check
        run: |
          set -e
          echo "Checking Python syntax..."
          FILES=$(find . -name "*.py" -not -path "./.git/*" -not -path "./venv/*" -not -path "./env/*" -not -path "./__pycache__/*" | head -20)
          if [ -n "$FILES" ]; then
            echo "Found Python files:"
            echo "$FILES"
            python -m py_compile $FILES
            echo "✅ All Python files compile successfully"
          else
            echo "No Python files found to check"
          fi

  deploy:
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Trust SSH host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Emergency disk cleanup
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "🚨 EMERGENCY DISK CLEANUP - Server is full!"
            echo "📊 Disk usage before cleanup:"
            df -h

            echo "🧹 Cleaning up everything possible..."

            # Stop all Docker containers and remove everything
            sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker rmi $(sudo docker images -q) 2>/dev/null || true
            sudo docker volume rm $(sudo docker volume ls -q) 2>/dev/null || true
            sudo docker network rm $(sudo docker network ls -q) 2>/dev/null || true
            sudo docker system prune -af --volumes 2>/dev/null || true
            sudo docker builder prune -af 2>/dev/null || true

            # Clean Docker build cache and layers
            sudo rm -rf /var/lib/docker/tmp/* 2>/dev/null || true
            sudo rm -rf /var/lib/docker/overlay2/* 2>/dev/null || true
            sudo rm -rf /var/lib/docker/image/* 2>/dev/null || true

            # Clean package cache
            sudo apt-get autoremove -y 2>/dev/null || true
            sudo apt-get autoclean 2>/dev/null || true
            sudo apt-get clean 2>/dev/null || true
            sudo rm -rf /var/cache/apt/archives/* 2>/dev/null || true
            sudo rm -rf /var/lib/apt/lists/* 2>/dev/null || true

            # Clean temporary files
            sudo rm -rf /tmp/* 2>/dev/null || true
            sudo rm -rf /var/tmp/* 2>/dev/null || true
            sudo rm -rf /var/log/*.log 2>/dev/null || true
            sudo rm -rf /var/log/*.gz 2>/dev/null || true

            # Clean old kernels
            sudo apt-get autoremove --purge -y 2>/dev/null || true

            # Clean system logs
            sudo journalctl --vacuum-time=1d 2>/dev/null || true
            sudo find /var/log -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true

            # Clean home directory
            rm -rf ~/.cache/* 2>/dev/null || true
            rm -rf ~/.npm/* 2>/dev/null || true

            # Clean up any existing app directories
            sudo rm -rf /opt/chatbot-app 2>/dev/null || true
            sudo rm -rf /tmp/chatbot-app 2>/dev/null || true

            echo "📊 Disk usage after cleanup:"
            df -h

            echo "🔍 Finding largest directories:"
            sudo du -h --max-depth=1 / 2>/dev/null | sort -hr | head -10 || true

      - name: Create app directory on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "📁 Creating app directory..."
            echo "Target directory: ${{ secrets.APP_DIR }}"

            # Use permanent directory instead of /tmp
            APP_DIR="/opt/chatbot-app"
            echo "Using permanent directory: $APP_DIR"

            sudo mkdir -p $APP_DIR
            sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} $APP_DIR
            sudo chmod 755 $APP_DIR

            echo "✅ Permanent directory created: $APP_DIR"
            echo "Current user: $(whoami)"
            echo "Directory permissions:"
            ls -la $APP_DIR
            echo "📊 Available space:"
            df -h $APP_DIR

      - name: Clone repo on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "📥 Cloning repository directly on server..."
            echo "Repository: ${{ github.server_url }}/${{ github.repository }}.git"

            # Use permanent directory
            APP_DIR="/opt/chatbot-app"
            echo "Target directory: $APP_DIR"

            # Remove existing directory if it exists
            sudo rm -rf $APP_DIR

            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git $APP_DIR

            # Set proper ownership
            sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} $APP_DIR

            echo "✅ Repository cloned successfully"
            echo "📊 Disk usage after clone:"
            df -h

      - name: Verify clone and checkout latest
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "🔍 Verifying repository clone..."
            APP_DIR="/opt/chatbot-app"
            cd $APP_DIR
            echo "Current directory: $(pwd)"
            echo "Git status:"
            git status
            echo "Latest commit:"
            git log --oneline -1
            echo "Files in directory:"
            ls -la
            echo "📊 Disk usage after clone:"
            df -h

      - name: Build, restart, health check
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            echo "🚀 Starting deployment..."

            # Use a more permanent directory instead of /tmp
            APP_DIR="/opt/chatbot-app"
            echo "📁 Using permanent directory: $APP_DIR"

            # Create directory with proper permissions
            echo "Creating directory: $APP_DIR"
            sudo mkdir -p $APP_DIR
            sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} $APP_DIR
            sudo chmod 755 $APP_DIR

            # Change to directory and verify
            cd $APP_DIR
            echo "✅ Current directory: $(pwd)"
            echo "📋 Directory contents:"
            ls -la
            echo "📊 Directory permissions:"
            ls -ld $APP_DIR

            # Check if we have the application files
            if [ ! -f "main.py" ] || [ ! -f "requirements.txt" ] || [ ! -f "Dockerfile" ] || [ ! -f "docker-compose.yml" ]; then
              echo "❌ Application files missing! Cloning repository..."
              sudo rm -rf $APP_DIR/*
              git clone https://github.com/${{ github.repository }}.git $APP_DIR
              sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} $APP_DIR
              echo "✅ Repository cloned"
              ls -la
            else
              echo "✅ Application files found"
            fi

            # Double-check critical files exist
            echo "🔍 Verifying critical files..."
            echo "main.py exists: $([ -f "main.py" ] && echo "YES" || echo "NO")"
            echo "requirements.txt exists: $([ -f "requirements.txt" ] && echo "YES" || echo "NO")"
            echo "Dockerfile exists: $([ -f "Dockerfile" ] && echo "YES" || echo "NO")"
            echo "docker-compose.yml exists: $([ -f "docker-compose.yml" ] && echo "YES" || echo "NO")"

            # Show file permissions
            echo "📋 File permissions:"
            ls -la main.py requirements.txt Dockerfile docker-compose.yml 2>/dev/null || echo "Some files missing"

            # Start Docker service
            echo "🐳 Starting Docker service..."
            sudo systemctl start docker
            sudo systemctl enable docker

            # Wait for Docker to be ready
            echo "⏳ Waiting for Docker to be ready..."
            timeout 30 bash -c 'until docker info >/dev/null 2>&1; do sleep 1; done' || {
              echo "❌ Docker failed to start"
              sudo systemctl status docker
              exit 1
            }

            echo "✅ Docker is running"

            # Clean up disk space aggressively
            echo "🧹 Cleaning up disk space..."
            sudo docker system prune -af --volumes || true
            sudo docker builder prune -af || true
            sudo apt-get autoremove -y || true
            sudo apt-get autoclean || true
            sudo apt-get clean || true
            sudo rm -rf /tmp/* || true
            sudo rm -rf /var/tmp/* || true
            echo "📊 Disk usage before build:"
            df -h

            # Add current user to docker group (if not already added)
            echo "👤 Adding user to docker group..."
            sudo usermod -aG docker $USER || true

            # Check if docker compose is available
            if docker compose version >/dev/null 2>&1; then 
              DC="docker compose"
            else 
              DC="docker-compose"
            fi

            echo "Using Docker Compose command: $DC"

            # Final verification before Docker commands
            echo "🔍 Final verification before Docker commands..."
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            echo "docker-compose.yml exists: $([ -f "docker-compose.yml" ] && echo "YES" || echo "NO")"

            if [ ! -f "docker-compose.yml" ]; then
              echo "❌ docker-compose.yml missing! Re-cloning repository..."
              sudo rm -rf $APP_DIR/*
              git clone https://github.com/${{ github.repository }}.git $APP_DIR
              sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} $APP_DIR
              cd $APP_DIR
              echo "✅ Repository re-cloned"
              ls -la
            fi

            # Stop existing containers and clean up ports
            echo "⏹️ Stopping existing containers..."
            $DC down || true

            # Kill any processes using ports 8000, 27017, 6379
            echo "🔌 Checking for processes using ports 8000, 27017, 6379..."

            # Kill port 8000
            PORT_PID=$(sudo lsof -t -i:8000 2>/dev/null || echo "")
            if [ ! -z "$PORT_PID" ]; then
              echo "Found process $PORT_PID using port 8000, killing it..."
              sudo kill -9 $PORT_PID || true
            fi

            # Kill port 27017 (MongoDB)
            MONGODB_PID=$(sudo lsof -t -i:27017 2>/dev/null || echo "")
            if [ ! -z "$MONGODB_PID" ]; then
              echo "Found process $MONGODB_PID using port 27017, killing it..."
              sudo kill -9 $MONGODB_PID || true
            fi

            # Kill port 6379 (Redis)
            REDIS_PID=$(sudo lsof -t -i:6379 2>/dev/null || echo "")
            if [ ! -z "$REDIS_PID" ]; then
              echo "Found process $REDIS_PID using port 6379, killing it..."
              sudo kill -9 $REDIS_PID || true
            fi

            # Stop any existing Redis/MongoDB services
            echo "🛑 Stopping existing Redis and MongoDB services..."
            sudo systemctl stop redis-server 2>/dev/null || true
            sudo systemctl stop mongod 2>/dev/null || true
            sudo systemctl stop redis 2>/dev/null || true
            sudo systemctl stop mongodb 2>/dev/null || true

            sleep 3

            # Remove any existing containers with the same name
            echo "🗑️ Removing any existing chatbot-backend containers..."
            sudo docker rm -f chatbot-backend 2>/dev/null || true

            # Clean up any orphaned networks
            echo "🧹 Cleaning up orphaned networks..."
            sudo docker network prune -f || true

            # Build new container
            echo "🏗️ Building new container..."
            echo "Current directory: $(pwd)"
            echo "Docker Compose file:"
            cat docker-compose.yml || echo "No docker-compose.yml found"
            $DC build --no-cache web

            # Start containers
            echo "🚀 Starting containers..."
            $DC up -d

            # Wait for MongoDB and Redis to be ready
            echo "⏳ Waiting for MongoDB and Redis to start..."
            sleep 15

            # Check if MongoDB is ready
            echo "🔍 Checking MongoDB status..."
            sudo docker exec chatbot-mongodb mongosh --eval "db.adminCommand('ping')" || echo "MongoDB not ready yet"

            # Check if Redis is ready
            echo "🔍 Checking Redis status..."
            sudo docker exec chatbot-redis redis-cli ping || echo "Redis not ready yet"

            # Wait for web service to be ready
            echo "⏳ Waiting for web service to start..."
            sleep 10

            # Verify containers are running
            echo "🔍 Checking container status..."
            sudo docker ps -a
            echo "🔌 Checking port 8000..."
            sudo netstat -tlnp | grep :8000 || echo "Port 8000 not found in netstat"
            sudo lsof -i:8000 || echo "No process found using port 8000"

            # Health check
            echo "🏥 Running health check..."
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ping || echo 000)
              echo "Health check attempt $i: HTTP $code"
              if [ "$code" = "200" ]; then
                echo "✅ Health check passed!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "❌ Health check failed after 30 attempts"
                echo "Container logs:"
                $DC logs --no-color --tail=50 web
                exit 1
              fi
              sleep 5
            done

            echo "🎉 Deployment completed successfully!"
            echo "Your app is running at: http://${{ secrets.SSH_HOST }}:8000"
