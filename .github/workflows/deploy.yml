name: ci-cd
on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          set -e
          python -m pip install --upgrade pip wheel setuptools
          REQS=""
          for f in requirements.txt app/requirements.txt; do
            if [ -f "$f" ]; then REQS="$f"; break; fi
          done
          if [ -z "$REQS" ]; then
            echo "No requirements.txt found (checked: ./requirements.txt and ./app/requirements.txt)"
            exit 1
          fi
          echo "Using $REQS"
          pip install -r "$REQS"
      - name: Syntax check
        run: |
          set -e
          echo "Checking Python syntax..."
          FILES=$(find . -name "*.py" -not -path "./.git/*" -not -path "./venv/*" -not -path "./env/*" -not -path "./__pycache__/*" | head -20)
          if [ -n "$FILES" ]; then
            echo "Found Python files:"
            echo "$FILES"
            python -m py_compile $FILES
            echo "‚úÖ All Python files compile successfully"
          else
            echo "No Python files found to check"
          fi

  deploy:
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Trust SSH host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Emergency disk cleanup
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "üö® EMERGENCY DISK CLEANUP - Server is full!"
            echo "üìä Disk usage before cleanup:"
            df -h
            
            echo "üßπ Cleaning up everything possible..."
            
            # Stop all Docker containers and remove everything
            sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker rmi $(sudo docker images -q) 2>/dev/null || true
            sudo docker system prune -af --volumes 2>/dev/null || true
            sudo docker builder prune -af 2>/dev/null || true
            
            # Clean package cache
            sudo apt-get autoremove -y 2>/dev/null || true
            sudo apt-get autoclean 2>/dev/null || true
            sudo apt-get clean 2>/dev/null || true
            
            # Clean temporary files
            sudo rm -rf /tmp/* 2>/dev/null || true
            sudo rm -rf /var/tmp/* 2>/dev/null || true
            sudo rm -rf /var/log/*.log 2>/dev/null || true
            sudo rm -rf /var/log/*.gz 2>/dev/null || true
            
            # Clean old kernels
            sudo apt-get autoremove --purge -y 2>/dev/null || true
            
            # Clean home directory
            rm -rf ~/.cache/* 2>/dev/null || true
            rm -rf ~/.npm/* 2>/dev/null || true
            
            echo "üìä Disk usage after cleanup:"
            df -h
            
            echo "üîç Finding largest directories:"
            sudo du -h --max-depth=1 / 2>/dev/null | sort -hr | head -10 || true

      - name: Create app directory on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "üìÅ Creating app directory..."
            echo "Target directory: ${{ secrets.APP_DIR }}"
            
            # Try to create directory in /tmp first (usually has more space)
            TEMP_DIR="/tmp/chatbot-app"
            echo "Using temporary directory: $TEMP_DIR"
            
            sudo mkdir -p $TEMP_DIR
            sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} $TEMP_DIR
            sudo chmod 755 $TEMP_DIR
            
            echo "‚úÖ Temporary directory created: $TEMP_DIR"
            echo "Current user: $(whoami)"
            echo "Directory permissions:"
            ls -la $TEMP_DIR
            echo "üìä Available space:"
            df -h $TEMP_DIR

      - name: Clone repo on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "üì• Cloning repository directly on server..."
            echo "Repository: ${{ github.server_url }}/${{ github.repository }}.git"
            
            # Use temporary directory
            TEMP_DIR="/tmp/chatbot-app"
            echo "Target directory: $TEMP_DIR"
            
            # Remove existing directory if it exists
            sudo rm -rf $TEMP_DIR
            
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git $TEMP_DIR
            
            # Set proper ownership
            sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} $TEMP_DIR
            
            echo "‚úÖ Repository cloned successfully"
            echo "üìä Disk usage after clone:"
            df -h

      - name: Verify clone and checkout latest
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "üîç Verifying repository clone..."
            TEMP_DIR="/tmp/chatbot-app"
            cd $TEMP_DIR
            echo "Current directory: $(pwd)"
            echo "Git status:"
            git status
            echo "Latest commit:"
            git log --oneline -1
            echo "Files in directory:"
            ls -la
            echo "üìä Disk usage after clone:"
            df -h

      - name: Build, restart, health check
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            echo "üöÄ Starting deployment..."
            TEMP_DIR="/tmp/chatbot-app"
            cd $TEMP_DIR

            # Start Docker service
            echo "üê≥ Starting Docker service..."
            sudo systemctl start docker
            sudo systemctl enable docker

            # Wait for Docker to be ready
            echo "‚è≥ Waiting for Docker to be ready..."
            timeout 30 bash -c 'until docker info >/dev/null 2>&1; do sleep 1; done' || {
              echo "‚ùå Docker failed to start"
              sudo systemctl status docker
              exit 1
            }

            echo "‚úÖ Docker is running"

            # Clean up disk space aggressively
            echo "üßπ Cleaning up disk space..."
            sudo docker system prune -af --volumes || true
            sudo docker builder prune -af || true
            sudo apt-get autoremove -y || true
            sudo apt-get autoclean || true
            sudo apt-get clean || true
            sudo rm -rf /tmp/* || true
            sudo rm -rf /var/tmp/* || true
            echo "üìä Disk usage before build:"
            df -h

            # Add current user to docker group (if not already added)
            echo "üë§ Adding user to docker group..."
            sudo usermod -aG docker $USER || true

            # Check if docker compose is available
            if docker compose version >/dev/null 2>&1; then 
              DC="docker compose"
            else 
              DC="docker-compose"
            fi

            echo "Using Docker Compose command: $DC"

            # Stop existing containers
            echo "‚èπÔ∏è Stopping existing containers..."
            $DC down || true

            # Build new container
            echo "üèóÔ∏è Building new container..."
            $DC build --no-cache web

            # Start containers
            echo "üöÄ Starting containers..."
            $DC up -d

            # Wait for service to be ready
            echo "‚è≥ Waiting for service to start..."
            sleep 10

            # Health check
            echo "üè• Running health check..."
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ping || echo 000)
              echo "Health check attempt $i: HTTP $code"
              if [ "$code" = "200" ]; then
                echo "‚úÖ Health check passed!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "‚ùå Health check failed after 30 attempts"
                echo "Container logs:"
                $DC logs --no-color --tail=50 web
                exit 1
              fi
              sleep 5
            done

            echo "üéâ Deployment completed successfully!"
            echo "Your app is running at: http://${{ secrets.SSH_HOST }}:8000"
